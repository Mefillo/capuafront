{"ast":null,"code":"var _jsxFileName = \"/Users/artem/Desktop/python/capua/front/src/components/directory/directory.component.jsx\";\nimport React from 'react';\nimport Product from '../products-items/product-item.component';\nimport './directory.component.scss';\nimport { ApolloProvider } from 'react-apollo';\nimport { createHttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloClient, gql } from 'apollo-boost';\nimport SERVER_URL from '../../global';\nconst httpLink = createHttpLink({\n  uri: SERVER_URL + 'graphql/'\n});\nconst cache = new InMemoryCache();\nconst client = new ApolloClient({\n  link: httpLink,\n  cache\n});\n\nclass Directory extends React.Component {\n  componentDidMount() {\n    client.query({\n      query: gql`{\n                            products{\n                                    id\n                                    name\n                                    imgListing\n                                    price\n                                    color\n                                    width\n                                    link   \n                                    }\n                            }\n                        \n            `\n    }).then(response => this.setState({\n      products: response.data.products\n    })).catch();\n  }\n\n  constructor() {\n    super();\n    this.state = {\n      products: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ApolloProvider, {\n      client: client,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cards\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, this.state.products.map(({\n      name,\n      price,\n      color,\n      imgListing,\n      order,\n      id,\n      width,\n      link\n    }) => /*#__PURE__*/React.createElement(Product, {\n      key: name,\n      name: name,\n      price: '$' + price.toString(),\n      color: color,\n      img: SERVER_URL + 'media/' + imgListing,\n      imgLoaded: this.props.imgLoaded,\n      order: order,\n      id: id,\n      width: width,\n      link: link,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n}\n\nexport default Directory;","map":{"version":3,"sources":["/Users/artem/Desktop/python/capua/front/src/components/directory/directory.component.jsx"],"names":["React","Product","ApolloProvider","createHttpLink","InMemoryCache","ApolloClient","gql","SERVER_URL","httpLink","uri","cache","client","link","Directory","Component","componentDidMount","query","then","response","setState","products","data","catch","constructor","state","render","map","name","price","color","imgListing","order","id","width","toString","props","imgLoaded"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,OAAP,MAAoB,0CAApB;AACA,OAAO,4BAAP;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,YAAT,EAAuBC,GAAvB,QAAkC,cAAlC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,MAAMC,QAAQ,GAAGL,cAAc,CAAC;AAC9BM,EAAAA,GAAG,EAAEF,UAAU,GAAG;AADY,CAAD,CAA/B;AAKA,MAAMG,KAAK,GAAG,IAAIN,aAAJ,EAAd;AAEA,MAAMO,MAAM,GAAG,IAAIN,YAAJ,CAAiB;AAC9BO,EAAAA,IAAI,EAAEJ,QADwB;AAE9BE,EAAAA;AAF8B,CAAjB,CAAf;;AAKA,MAAMG,SAAN,SAAwBb,KAAK,CAACc,SAA9B,CAAwC;AACtCC,EAAAA,iBAAiB,GAAI;AACnBJ,IAAAA,MAAM,CAACK,KAAP,CAAa;AACXA,MAAAA,KAAK,EAAEV,GAAI;;;;;;;;;;;;;AADA,KAAb,EAcGW,IAdH,CAcQC,QAAQ,IAAI,KAAKC,QAAL,CAAc;AAAEC,MAAAA,QAAQ,EAAEF,QAAQ,CAACG,IAAT,CAAcD;AAA1B,KAAd,CAdpB,EAcyEE,KAdzE;AAeD;;AAEDC,EAAAA,WAAW,GAAI;AACb;AAEA,SAAKC,KAAL,GAAa;AACXJ,MAAAA,QAAQ,EAAE;AADC,KAAb;AAID;;AAEDK,EAAAA,MAAM,GAAI;AACR,wBACE,oBAAC,cAAD;AAAgB,MAAA,MAAM,EAAId,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,KAAKa,KAAL,CAAWJ,QAAX,CAAoBM,GAApB,CAAwB,CAAC;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA,KAAf;AAAsBC,MAAAA,UAAtB;AAAkCC,MAAAA,KAAlC;AAAyCC,MAAAA,EAAzC;AAA6CC,MAAAA,KAA7C;AAAoDrB,MAAAA;AAApD,KAAD,kBACtB,oBAAC,OAAD;AAAS,MAAA,GAAG,EAAEe,IAAd;AAAoB,MAAA,IAAI,EAAIA,IAA5B;AAAkC,MAAA,KAAK,EAAI,MAAMC,KAAK,CAACM,QAAN,EAAjD;AAAmE,MAAA,KAAK,EAAEL,KAA1E;AAAiF,MAAA,GAAG,EAAEtB,UAAU,GAAG,QAAb,GAAwBuB,UAA9G;AAA0H,MAAA,SAAS,EAAE,KAAKK,KAAL,CAAWC,SAAhJ;AAA2J,MAAA,KAAK,EAAEL,KAAlK;AAAyK,MAAA,EAAE,EAAIC,EAA/K;AAAmL,MAAA,KAAK,EAAEC,KAA1L;AAAiM,MAAA,IAAI,EAAErB,IAAvM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFJ,CADF,CADF;AAYD;;AAzCqC;;AA4CxC,eAAeC,SAAf","sourcesContent":["import React from 'react'\n\nimport Product from '../products-items/product-item.component'\nimport './directory.component.scss'\nimport { ApolloProvider } from 'react-apollo'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { ApolloClient, gql } from 'apollo-boost'\nimport SERVER_URL from '../../global'\n\nconst httpLink = createHttpLink({\n  uri: SERVER_URL + 'graphql/'\n}\n)\n\nconst cache = new InMemoryCache()\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache\n})\n\nclass Directory extends React.Component {\n  componentDidMount () {\n    client.query({\n      query: gql`{\n                            products{\n                                    id\n                                    name\n                                    imgListing\n                                    price\n                                    color\n                                    width\n                                    link   \n                                    }\n                            }\n                        \n            `\n    }).then(response => this.setState({ products: response.data.products })).catch()\n  }\n\n  constructor () {\n    super()\n\n    this.state = {\n      products: [\n      ]\n    }\n  }\n\n  render () {\n    return (\n      <ApolloProvider client = {client}>\n        <div className=\"cards\">\n          {\n            this.state.products.map(({ name, price, color, imgListing, order, id, width, link }) => (\n              <Product key={name} name = {name} price = {'$' + price.toString()} color={color} img={SERVER_URL + 'media/' + imgListing} imgLoaded={this.props.imgLoaded} order={order} id = {id} width={width} link={link} />\n            )\n            )\n          }\n        </div>\n      </ApolloProvider>\n    )\n  }\n}\n\nexport default Directory\n"]},"metadata":{},"sourceType":"module"}