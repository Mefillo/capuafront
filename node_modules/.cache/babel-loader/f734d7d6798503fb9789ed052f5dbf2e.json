{"ast":null,"code":"var _jsxFileName = \"/Users/artem/Desktop/python/capua/front/src/components/directory/directory.component.jsx\";\nimport React from 'react';\nimport Product from '../products-items/product-item.component';\nimport \"./directory.component.scss\";\nimport { ApolloProvider } from 'react-apollo';\nimport { createHttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloClient, gql } from 'apollo-boost';\nimport SERVER_URL from '../../global';\nconst httpLink = createHttpLink({\n  uri: SERVER_URL + 'graphql/'\n});\nconst cache = new InMemoryCache();\nconst client = new ApolloClient({\n  link: httpLink,\n  cache\n});\n\nclass Directory extends React.Component {\n  componentDidMount() {\n    client.query({\n      query: gql`{\n                            products{\n                                    id\n                                    name\n                                    imgListing\n                                    price\n                                    color\n                                    width\n                                    link   \n                                    }\n                            }\n                        \n            `\n    }).then(response => this.setState({\n      products: response.data.products\n    })).catch();\n  }\n\n  constructor() {\n    super();\n    this.state = {\n      products: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ApolloProvider, {\n      client: client,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cards\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, this.state.products.map(({\n      name,\n      price,\n      color,\n      imgListing,\n      order,\n      id,\n      width,\n      link\n    }) => /*#__PURE__*/React.createElement(Product, {\n      key: name,\n      name: name,\n      price: '$' + price.toString(),\n      color: color,\n      img: SERVER_URL + 'media/' + imgListing,\n      order: order,\n      id: id,\n      width: width,\n      link: link,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }\n    }))));\n  }\n\n}\n\nexport default Directory;","map":{"version":3,"sources":["/Users/artem/Desktop/python/capua/front/src/components/directory/directory.component.jsx"],"names":["React","Product","ApolloProvider","createHttpLink","InMemoryCache","ApolloClient","gql","SERVER_URL","httpLink","uri","cache","client","link","Directory","Component","componentDidMount","query","then","response","setState","products","data","catch","constructor","state","render","map","name","price","color","imgListing","order","id","width","toString"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,OAAP,MAAoB,0CAApB;AACA,OAAO,4BAAP;AACA,SAAQC,cAAR,QAA6B,cAA7B;AACA,SAAQC,cAAR,QAA6B,kBAA7B;AACA,SAAQC,aAAR,QAA4B,uBAA5B;AACA,SAAQC,YAAR,EAAsBC,GAAtB,QAAgC,cAAhC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,MAAMC,QAAQ,GAAGL,cAAc,CAAE;AAC7BM,EAAAA,GAAG,EAAEF,UAAU,GAAG;AADW,CAAF,CAA/B;AAKA,MAAMG,KAAK,GAAG,IAAIN,aAAJ,EAAd;AAEA,MAAMO,MAAM,GAAG,IAAIN,YAAJ,CAAiB;AAC5BO,EAAAA,IAAI,EAACJ,QADuB;AAE5BE,EAAAA;AAF4B,CAAjB,CAAf;;AAMA,MAAMG,SAAN,SAAwBb,KAAK,CAACc,SAA9B,CAAwC;AAEpCC,EAAAA,iBAAiB,GAAG;AAChBJ,IAAAA,MAAM,CAACK,KAAP,CAAa;AACTA,MAAAA,KAAK,EAAEV,GAAI;;;;;;;;;;;;;AADF,KAAb,EAcGW,IAdH,CAcQC,QAAQ,IAAI,KAAKC,QAAL,CAAc;AAAEC,MAAAA,QAAQ,EAAEF,QAAQ,CAACG,IAAT,CAAcD;AAA1B,KAAd,CAdpB,EAcwEE,KAdxE;AAeH;;AAIDC,EAAAA,WAAW,GAAE;AACT;AAEA,SAAKC,KAAL,GAAa;AACTJ,MAAAA,QAAQ,EAAE;AADD,KAAb;AAIH;;AAEDK,EAAAA,MAAM,GAAE;AACJ,wBACI,oBAAC,cAAD;AAAgB,MAAA,MAAM,EAAId,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,KAAKa,KAAL,CAAWJ,QAAX,CAAoBM,GAApB,CAAwB,CAAC;AAACC,MAAAA,IAAD;AAAOC,MAAAA,KAAP;AAAcC,MAAAA,KAAd;AAAqBC,MAAAA,UAArB;AAAiCC,MAAAA,KAAjC;AAAwCC,MAAAA,EAAxC;AAA4CC,MAAAA,KAA5C;AAAmDrB,MAAAA;AAAnD,KAAD,kBACpB,oBAAC,OAAD;AAAS,MAAA,GAAG,EAAEe,IAAd;AAAoB,MAAA,IAAI,EAAIA,IAA5B;AAAkC,MAAA,KAAK,EAAI,MAAMC,KAAK,CAACM,QAAN,EAAjD;AAAmE,MAAA,KAAK,EAAEL,KAA1E;AAAiF,MAAA,GAAG,EAAEtB,UAAU,GAAG,QAAb,GAAsBuB,UAA5G;AAAwH,MAAA,KAAK,EAAEC,KAA/H;AAAsI,MAAA,EAAE,EAAIC,EAA5I;AAAgJ,MAAA,KAAK,EAAEC,KAAvJ;AAA8J,MAAA,IAAI,EAAErB,IAApK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFJ,CADA,CADJ;AAYH;;AA5CmC;;AA+CxC,eAAeC,SAAf","sourcesContent":["import React from 'react';\n\nimport Product from '../products-items/product-item.component';\nimport \"./directory.component.scss\"\nimport {ApolloProvider} from 'react-apollo';\nimport {createHttpLink} from 'apollo-link-http';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport {ApolloClient, gql} from 'apollo-boost';\nimport SERVER_URL from '../../global';\n\nconst httpLink = createHttpLink ({\n    uri: SERVER_URL + 'graphql/'\n}\n)\n\nconst cache = new InMemoryCache ();\n\nconst client = new ApolloClient({\n    link:httpLink,\n    cache\n});\n\n\nclass Directory extends React.Component {\n\n    componentDidMount() {\n        client.query({\n            query: gql`{\n                            products{\n                                    id\n                                    name\n                                    imgListing\n                                    price\n                                    color\n                                    width\n                                    link   \n                                    }\n                            }\n                        \n            `\n        }).then(response => this.setState({ products: response.data.products})).catch();\n    }\n\n\n    \n    constructor(){\n        super();\n\n        this.state = {\n            products: [\n            ]\n        }\n    }\n\n    render(){\n        return(\n            <ApolloProvider client = {client}>\n            <div className=\"cards\">\n            {\n                this.state.products.map(({name, price, color, imgListing, order, id, width, link})=> (\n                    <Product key={name} name = {name} price = {'$' + price.toString()} color={color} img={SERVER_URL + 'media/'+imgListing} order={order} id = {id} width={width} link={link} />\n                )\n                )\n            }\n            </div>\n            </ApolloProvider>\n        )\n    }\n}\n\nexport default Directory;"]},"metadata":{},"sourceType":"module"}